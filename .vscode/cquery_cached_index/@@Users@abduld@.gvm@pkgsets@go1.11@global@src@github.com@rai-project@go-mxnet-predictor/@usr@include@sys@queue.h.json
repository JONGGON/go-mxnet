15
{"last_modification_time":1520317440,"language":0,"import_file":"/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/van.cc","args":["clang++","-working-directory=/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/","/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/van.cc","-resource-dir=/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/local/Cellar/llvm/6.0.1/include/c++/v1","-isystem/usr/local/include","-isystem/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include","-isystem/usr/include","-iframework/System/Library/Frameworks","-iframework/Library/Frameworks"],"includes":[],"dependencies":["/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/van.cc","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/thread","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/iosfwd","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/wchar.h","/usr/include/wchar.h","/usr/include/_types.h","/usr/include/sys/_types.h","/usr/include/sys/cdefs.h","/usr/include/machine/_types.h","/usr/include/sys/_pthread/_pthread_types.h","/usr/include/Availability.h","/usr/include/sys/_types/_null.h","/usr/include/sys/_types/_size_t.h","/usr/include/sys/_types/_mbstate_t.h","/usr/include/machine/types.h","/usr/include/i386/types.h","/usr/include/sys/_types/_intptr_t.h","/usr/include/sys/_types/_ct_rune_t.h","/usr/include/sys/_types/_rune_t.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/stdio.h","/usr/include/stdio.h","/usr/include/_stdio.h","/usr/include/sys/_types/_va_list.h","/usr/include/sys/stdio.h","/usr/include/sys/_types/_off_t.h","/usr/include/sys/_types/_ssize_t.h","/usr/include/time.h","/usr/include/sys/_types/_clock_t.h","/usr/include/sys/_types/_time_t.h","/usr/include/sys/_types/_timespec.h","/usr/include/_wctype.h","/usr/include/__wctype.h","/usr/include/sys/_types/_wint_t.h","/usr/include/_types/_wctype_t.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/ctype.h","/usr/include/ctype.h","/usr/include/_ctype.h","/usr/include/runetype.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__functional_base","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/type_traits","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cstddef","/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include/stddef.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__nullptr","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/typeinfo","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/exception","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cstdlib","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/stdlib.h","/usr/include/stdlib.h","/usr/include/sys/wait.h","/usr/include/sys/_types/_pid_t.h","/usr/include/sys/_types/_id_t.h","/usr/include/sys/signal.h","/usr/include/machine/signal.h","/usr/include/i386/signal.h","/usr/include/machine/_mcontext.h","/usr/include/i386/_mcontext.h","/usr/include/mach/machine/_structs.h","/usr/include/mach/i386/_structs.h","/usr/include/sys/_pthread/_pthread_attr_t.h","/usr/include/sys/_types/_sigaltstack.h","/usr/include/sys/_types/_ucontext.h","/usr/include/sys/_types/_sigset_t.h","/usr/include/sys/_types/_uid_t.h","/usr/include/sys/resource.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/stdint.h","/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/sys/_types/_timeval.h","/usr/include/machine/endian.h","/usr/include/i386/endian.h","/usr/include/sys/_endian.h","/usr/include/libkern/_OSByteOrder.h","/usr/include/alloca.h","/usr/include/sys/_types/_dev_t.h","/usr/include/sys/_types/_mode_t.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cstdint","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/new","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/utility","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__tuple","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/initializer_list","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cstring","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/string.h","/usr/include/string.h","/usr/include/strings.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__debug","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/functional","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/memory","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/limits","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/iterator","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/tuple","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/stdexcept","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cassert","/usr/include/assert.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/atomic","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/system_error","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cerrno","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/errno.h","/usr/include/errno.h","/usr/include/sys/errno.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/string","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/string_view","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__string","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/algorithm","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cstdio","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cwchar","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cwctype","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cctype","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/wctype.h","/usr/include/wctype.h","/usr/include/_types/_wctrans_t.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/chrono","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/ctime","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/ratio","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/climits","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/limits.h","/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include/limits.h","/usr/include/limits.h","/usr/include/machine/limits.h","/usr/include/i386/limits.h","/usr/include/sys/syslimits.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__mutex_base","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__threading_support","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/sys/_pthread/_pthread_cond_t.h","/usr/include/sys/_pthread/_pthread_condattr_t.h","/usr/include/sys/_pthread/_pthread_key_t.h","/usr/include/sys/_pthread/_pthread_mutex_t.h","/usr/include/sys/_pthread/_pthread_mutexattr_t.h","/usr/include/sys/_pthread/_pthread_once_t.h","/usr/include/sys/_pthread/_pthread_rwlock_t.h","/usr/include/sys/_pthread/_pthread_rwlockattr_t.h","/usr/include/sys/_pthread/_pthread_t.h","/usr/include/pthread/qos.h","/usr/include/sys/qos.h","/usr/include/sys/_types/_mach_port_t.h","/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/network_utils.h","/usr/include/unistd.h","/usr/include/sys/unistd.h","/usr/include/sys/_types/_seek_set.h","/usr/include/sys/_types/_gid_t.h","/usr/include/sys/_types/_useconds_t.h","/usr/include/sys/select.h","/usr/include/sys/_types/_fd_def.h","/usr/include/sys/_types/_suseconds_t.h","/usr/include/sys/_types/_uuid_t.h","/usr/include/gethostuuid.h","/usr/include/net/if.h","/usr/include/net/if_var.h","/usr/include/sys/types.h","/usr/include/sys/_types/_blkcnt_t.h","/usr/include/sys/_types/_blksize_t.h","/usr/include/sys/_types/_in_addr_t.h","/usr/include/sys/_types/_in_port_t.h","/usr/include/sys/_types/_ino_t.h","/usr/include/sys/_types/_ino64_t.h","/usr/include/sys/_types/_key_t.h","/usr/include/sys/_types/_nlink_t.h","/usr/include/sys/_types/_fsblkcnt_t.h","/usr/include/sys/_types/_fsfilcnt_t.h","/usr/include/sys/time.h","/usr/include/sys/_types/_timeval64.h","/usr/include/sys/_types/_timeval32.h","/usr/include/sys/socket.h","/usr/include/machine/_param.h","/usr/include/i386/_param.h","/usr/include/sys/_types/_sa_family_t.h","/usr/include/sys/_types/_socklen_t.h","/usr/include/sys/_types/_iovec_t.h","/usr/include/arpa/inet.h","/usr/include/netinet/in.h","/usr/include/netinet6/in6.h","/usr/include/ifaddrs.h","/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/zmq_van.h","/Users/abduld/.gvm/pkgsets/go1.11/global/src/github.com/rai-project/go-mxnet-predictor/incubator-mxnet/ps-lite/src/resender.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/vector","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__bit_reference","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__split_buffer","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/unordered_set","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__hash_table","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/cmath","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/math.h","/usr/include/math.h","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/unordered_map","/usr/local/Cellar/llvm/6.0.1/include/c++/v1/__config","/usr/include/i386/_types.h","/usr/include/sys/_types/_int8_t.h","/usr/include/sys/_types/_int16_t.h","/usr/include/sys/_types/_int32_t.h","/usr/include/sys/_types/_int64_t.h","/usr/include/sys/_types/_u_int8_t.h","/usr/include/sys/_types/_u_int16_t.h","/usr/include/sys/_types/_u_int32_t.h","/usr/include/sys/_types/_u_int64_t.h","/usr/include/sys/_types/_uintptr_t.h","/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include/stdarg.h","/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1/include/__stddef_max_align_t.h","/usr/include/_types/_uint8_t.h","/usr/include/_types/_uint16_t.h","/usr/include/_types/_uint32_t.h","/usr/include/_types/_uint64_t.h","/usr/include/_types/_intmax_t.h","/usr/include/_types/_uintmax_t.h","/usr/include/libkern/i386/_OSByteOrder.h","/usr/include/sys/_types/_errno_t.h","/usr/include/sys/_select.h","/usr/include/sys/_types/_u_char.h","/usr/include/sys/_types/_u_short.h","/usr/include/sys/_types/_u_int.h","/usr/include/sys/_types/_caddr_t.h","/usr/include/sys/_symbol_aliasing.h","/usr/include/sys/_posix_availability.h","/usr/include/AvailabilityInternal.h","/usr/include/sys/_types/_wchar_t.h","/usr/include/sys/appleapiopts.h","/usr/include/sys/_types/_rsize_t.h","/usr/include/i386/_limits.h","/usr/include/pthread_impl.h","/usr/include/sys/_types/_posix_vdisable.h","/usr/include/sys/_types/_fd_setsize.h","/usr/include/sys/_types/_fd_set.h","/usr/include/sys/_types/_fd_clr.h","/usr/include/sys/_types/_fd_isset.h","/usr/include/sys/_types/_fd_zero.h","/usr/include/sys/_types/_fd_copy.h","/usr/include/net/net_kev.h"],"skipped_by_preprocessor":["143:1-169:6","196:1-199:7","439:1-458:6","789:1-835:7"],"types":[],"funcs":[],"vars":[{"id":0,"usr":1177819765635627056,"detailed_name":"_SYS_QUEUE_H_","short_name_offset":0,"short_name_size":13,"hover":"#define _SYS_QUEUE_H_","comments":"","declarations":[],"spell":"60:9-60:22|-1|1|2","extent":"60:9-60:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":2321159746889723483,"detailed_name":"QMD_TRACE_ELEM","short_name_offset":0,"short_name_size":14,"hover":"#define QMD_TRACE_ELEM(elem)","comments":"","declarations":[],"spell":"170:9-170:23|-1|1|2","extent":"170:9-170:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":16000269410229903103,"detailed_name":"QMD_TRACE_HEAD","short_name_offset":0,"short_name_size":14,"hover":"#define QMD_TRACE_HEAD(head)","comments":"","declarations":[],"spell":"171:9-171:23|-1|1|2","extent":"171:9-171:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":14540715055380450412,"detailed_name":"TRACEBUF","short_name_offset":0,"short_name_size":8,"hover":"#define TRACEBUF","comments":"","declarations":[],"spell":"172:9-172:17|-1|1|2","extent":"172:9-172:17|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":9021825771928008836,"detailed_name":"TRASHIT","short_name_offset":0,"short_name_size":7,"hover":"#define TRASHIT(x)","comments":"","declarations":[],"spell":"173:9-173:16|-1|1|2","extent":"173:9-173:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":10722113457267856619,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["190:13-190:22|-1|1|4"],"kind":0,"storage":0},{"id":6,"usr":6899744554554580474,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["190:35-190:46|-1|1|4"],"kind":0,"storage":0},{"id":7,"usr":2756768663888640862,"detailed_name":"__MISMATCH_TAGS_PUSH","short_name_offset":0,"short_name_size":20,"hover":"#define __MISMATCH_TAGS_PUSH\n _Pragma(\"clang diagnostic push\")\n _Pragma(\"clang diagnostic ignored \\\"-Wmismatched-tags\\\"\")","comments":"","declarations":[],"spell":"191:9-191:29|-1|1|2","extent":"191:9-193:59|-1|1|0","uses":[],"kind":255,"storage":0},{"id":8,"usr":14058281144317122506,"detailed_name":"__MISMATCH_TAGS_POP","short_name_offset":0,"short_name_size":19,"hover":"#define __MISMATCH_TAGS_POP\n _Pragma(\"clang diagnostic pop\")","comments":"","declarations":[],"spell":"194:9-194:28|-1|1|2","extent":"194:9-195:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":9,"usr":1567177090298653960,"detailed_name":"SLIST_HEAD","short_name_offset":0,"short_name_size":10,"hover":"#define SLIST_HEAD(name, type)      __MISMATCH_TAGS_PUSH       struct name {\n struct type *slh_first; /* first element */   \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"204:9-204:19|-1|1|2","extent":"204:9-209:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":10,"usr":3362594705431957402,"detailed_name":"SLIST_HEAD_INITIALIZER","short_name_offset":0,"short_name_size":22,"hover":"#define SLIST_HEAD_INITIALIZER(head)\n { NULL }","comments":"","declarations":[],"spell":"211:9-211:31|-1|1|2","extent":"211:9-212:10|-1|1|0","uses":[],"kind":255,"storage":0},{"id":11,"usr":13710958086177940608,"detailed_name":"SLIST_ENTRY","short_name_offset":0,"short_name_size":11,"hover":"#define SLIST_ENTRY(type)      __MISMATCH_TAGS_PUSH       struct {\n struct type *sle_next; /* next element */   \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"214:9-214:20|-1|1|2","extent":"214:9-219:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":12,"usr":17405917814384354099,"detailed_name":"SLIST_EMPTY","short_name_offset":0,"short_name_size":11,"hover":"#define SLIST_EMPTY(head) ((head)->slh_first == NULL)","comments":"","declarations":[],"spell":"224:9-224:20|-1|1|2","extent":"224:9-224:54|-1|1|0","uses":[],"kind":255,"storage":0},{"id":13,"usr":6450559964545581220,"detailed_name":"SLIST_FIRST","short_name_offset":0,"short_name_size":11,"hover":"#define SLIST_FIRST(head) ((head)->slh_first)","comments":"","declarations":[],"spell":"226:9-226:20|-1|1|2","extent":"226:9-226:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":14,"usr":14622754259582346204,"detailed_name":"SLIST_FOREACH","short_name_offset":0,"short_name_size":13,"hover":"#define SLIST_FOREACH(var, head, field)\n for ((var) = SLIST_FIRST((head));\n     (var);\n     (var) = SLIST_NEXT((var), field))","comments":"","declarations":[],"spell":"228:9-228:22|-1|1|2","extent":"228:9-231:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":15,"usr":17795581671244572594,"detailed_name":"SLIST_FOREACH_SAFE","short_name_offset":0,"short_name_size":18,"hover":"#define SLIST_FOREACH_SAFE(var, head, field, tvar)\n for ((var) = SLIST_FIRST((head));\n     (var) && ((tvar) = SLIST_NEXT((var), field), 1);\n     (var) = (tvar))","comments":"","declarations":[],"spell":"233:9-233:27|-1|1|2","extent":"233:9-236:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":16,"usr":2346074224456326514,"detailed_name":"SLIST_FOREACH_PREVPTR","short_name_offset":0,"short_name_size":21,"hover":"#define SLIST_FOREACH_PREVPTR(var, varp, head, field)\n for ((varp) = &SLIST_FIRST((head));\n     ((var) = *(varp)) != NULL;\n     (varp) = &SLIST_NEXT((var), field))","comments":"","declarations":[],"spell":"238:9-238:30|-1|1|2","extent":"238:9-241:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":17,"usr":2450230457565873267,"detailed_name":"SLIST_INIT","short_name_offset":0,"short_name_size":10,"hover":"#define SLIST_INIT(head) do {\n SLIST_FIRST((head)) = NULL;     \\\n} while (0)","comments":"","declarations":[],"spell":"243:9-243:19|-1|1|2","extent":"243:9-245:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":18,"usr":15487380984019440282,"detailed_name":"SLIST_INSERT_AFTER","short_name_offset":0,"short_name_size":18,"hover":"#define SLIST_INSERT_AFTER(slistelm, elm, field) do {\n SLIST_NEXT((elm), field) = SLIST_NEXT((slistelm), field);\n SLIST_NEXT((slistelm), field) = (elm);    \\\n} while (0)","comments":"","declarations":[],"spell":"247:9-247:27|-1|1|2","extent":"247:9-250:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":19,"usr":10753837184767255429,"detailed_name":"SLIST_INSERT_HEAD","short_name_offset":0,"short_name_size":17,"hover":"#define SLIST_INSERT_HEAD(head, elm, field) do {\n SLIST_NEXT((elm), field) = SLIST_FIRST((head));\n SLIST_FIRST((head)) = (elm);     \\\n} while (0)","comments":"","declarations":[],"spell":"252:9-252:26|-1|1|2","extent":"252:9-255:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":20,"usr":9668629740049728026,"detailed_name":"SLIST_NEXT","short_name_offset":0,"short_name_size":10,"hover":"#define SLIST_NEXT(elm, field) ((elm)->field.sle_next)","comments":"","declarations":[],"spell":"257:9-257:19|-1|1|2","extent":"257:9-257:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":21,"usr":10149248817366682961,"detailed_name":"SLIST_REMOVE","short_name_offset":0,"short_name_size":12,"hover":"#define SLIST_REMOVE(head, elm, type, field)    __MISMATCH_TAGS_PUSH       do {\n if (SLIST_FIRST((head)) == (elm)) {\n  SLIST_REMOVE_HEAD((head), field);\n }\n else {\n  struct type *curelm = SLIST_FIRST((head));\n  while (SLIST_NEXT(curelm, field) != (elm))\n   curelm = SLIST_NEXT(curelm, field);\n  SLIST_REMOVE_AFTER(curelm, field);\n }\n TRASHIT((elm)->field.sle_next);     \\\n} while (0)        __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"259:9-259:21|-1|1|2","extent":"259:9-273:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":1220790800695991067,"detailed_name":"SLIST_REMOVE_AFTER","short_name_offset":0,"short_name_size":18,"hover":"#define SLIST_REMOVE_AFTER(elm, field) do {\n SLIST_NEXT(elm, field) =\n     SLIST_NEXT(SLIST_NEXT(elm, field), field);   \\\n} while (0)","comments":"","declarations":[],"spell":"275:9-275:27|-1|1|2","extent":"275:9-278:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":3661449565543243634,"detailed_name":"SLIST_REMOVE_HEAD","short_name_offset":0,"short_name_size":17,"hover":"#define SLIST_REMOVE_HEAD(head, field) do {\n SLIST_FIRST((head)) = SLIST_NEXT(SLIST_FIRST((head)), field); \\\n} while (0)","comments":"","declarations":[],"spell":"280:9-280:26|-1|1|2","extent":"280:9-282:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":24,"usr":14360136797230863532,"detailed_name":"STAILQ_HEAD","short_name_offset":0,"short_name_size":11,"hover":"#define STAILQ_HEAD(name, type)      __MISMATCH_TAGS_PUSH       struct name {\n struct type *stqh_first;/* first element */\n struct type **stqh_last;/* addr of last next element */  \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"287:9-287:20|-1|1|2","extent":"287:9-293:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":25,"usr":10305523439560329881,"detailed_name":"STAILQ_HEAD_INITIALIZER","short_name_offset":0,"short_name_size":23,"hover":"#define STAILQ_HEAD_INITIALIZER(head)\n { NULL, &(head).stqh_first }","comments":"","declarations":[],"spell":"295:9-295:32|-1|1|2","extent":"295:9-296:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":26,"usr":5708573429649762898,"detailed_name":"STAILQ_ENTRY","short_name_offset":0,"short_name_size":12,"hover":"#define STAILQ_ENTRY(type)      __MISMATCH_TAGS_PUSH       struct {\n struct type *stqe_next; /* next element */   \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"298:9-298:21|-1|1|2","extent":"298:9-303:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":27,"usr":3892889554120571430,"detailed_name":"STAILQ_CONCAT","short_name_offset":0,"short_name_size":13,"hover":"#define STAILQ_CONCAT(head1, head2) do {\n if (!STAILQ_EMPTY((head2))) {\n  *(head1)->stqh_last = (head2)->stqh_first;\n  (head1)->stqh_last = (head2)->stqh_last;\n  STAILQ_INIT((head2));\n }        \\\n} while (0)","comments":"","declarations":[],"spell":"308:9-308:22|-1|1|2","extent":"308:9-314:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":28,"usr":16421081252425620321,"detailed_name":"STAILQ_EMPTY","short_name_offset":0,"short_name_size":12,"hover":"#define STAILQ_EMPTY(head) ((head)->stqh_first == NULL)","comments":"","declarations":[],"spell":"316:9-316:21|-1|1|2","extent":"316:9-316:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":29,"usr":1636174750255345775,"detailed_name":"STAILQ_FIRST","short_name_offset":0,"short_name_size":12,"hover":"#define STAILQ_FIRST(head) ((head)->stqh_first)","comments":"","declarations":[],"spell":"318:9-318:21|-1|1|2","extent":"318:9-318:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":30,"usr":6622010183293322473,"detailed_name":"STAILQ_FOREACH","short_name_offset":0,"short_name_size":14,"hover":"#define STAILQ_FOREACH(var, head, field)\n for((var) = STAILQ_FIRST((head));\n    (var);\n    (var) = STAILQ_NEXT((var), field))","comments":"","declarations":[],"spell":"320:9-320:23|-1|1|2","extent":"320:9-323:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":10296467672284658436,"detailed_name":"STAILQ_FOREACH_SAFE","short_name_offset":0,"short_name_size":19,"hover":"#define STAILQ_FOREACH_SAFE(var, head, field, tvar)\n for ((var) = STAILQ_FIRST((head));\n     (var) && ((tvar) = STAILQ_NEXT((var), field), 1);\n     (var) = (tvar))","comments":"","declarations":[],"spell":"326:9-326:28|-1|1|2","extent":"326:9-329:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":6267987174632173550,"detailed_name":"STAILQ_INIT","short_name_offset":0,"short_name_size":11,"hover":"#define STAILQ_INIT(head) do {\n STAILQ_FIRST((head)) = NULL;\n (head)->stqh_last = &STAILQ_FIRST((head));   \\\n} while (0)","comments":"","declarations":[],"spell":"331:9-331:20|-1|1|2","extent":"331:9-334:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":87596116338948448,"detailed_name":"STAILQ_INSERT_AFTER","short_name_offset":0,"short_name_size":19,"hover":"#define STAILQ_INSERT_AFTER(head, tqelm, elm, field) do {\n if ((STAILQ_NEXT((elm), field) = STAILQ_NEXT((tqelm), field)) == NULL)\n  (head)->stqh_last = &STAILQ_NEXT((elm), field);\n STAILQ_NEXT((tqelm), field) = (elm);    \\\n} while (0)","comments":"","declarations":[],"spell":"336:9-336:28|-1|1|2","extent":"336:9-340:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":34,"usr":13007023864377176711,"detailed_name":"STAILQ_INSERT_HEAD","short_name_offset":0,"short_name_size":18,"hover":"#define STAILQ_INSERT_HEAD(head, elm, field) do {\n if ((STAILQ_NEXT((elm), field) = STAILQ_FIRST((head))) == NULL)\n  (head)->stqh_last = &STAILQ_NEXT((elm), field);\n STAILQ_FIRST((head)) = (elm);     \\\n} while (0)","comments":"","declarations":[],"spell":"342:9-342:27|-1|1|2","extent":"342:9-346:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":11888935959997448169,"detailed_name":"STAILQ_INSERT_TAIL","short_name_offset":0,"short_name_size":18,"hover":"#define STAILQ_INSERT_TAIL(head, elm, field) do {\n STAILQ_NEXT((elm), field) = NULL;\n *(head)->stqh_last = (elm);\n (head)->stqh_last = &STAILQ_NEXT((elm), field);   \\\n} while (0)","comments":"","declarations":[],"spell":"348:9-348:27|-1|1|2","extent":"348:9-352:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":5353165294281533128,"detailed_name":"STAILQ_LAST","short_name_offset":0,"short_name_size":11,"hover":"#define STAILQ_LAST(head, type, field)     __MISMATCH_TAGS_PUSH\n (STAILQ_EMPTY((head)) ?\n  NULL :\n         ((struct type *)(void *)\n  ((char *)((head)->stqh_last) - __offsetof(struct type, field))))__MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"354:9-354:20|-1|1|2","extent":"354:9-360:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":37,"usr":17277637490467791021,"detailed_name":"STAILQ_NEXT","short_name_offset":0,"short_name_size":11,"hover":"#define STAILQ_NEXT(elm, field) ((elm)->field.stqe_next)","comments":"","declarations":[],"spell":"362:9-362:20|-1|1|2","extent":"362:9-362:57|-1|1|0","uses":[],"kind":255,"storage":0},{"id":38,"usr":4146997314467420645,"detailed_name":"STAILQ_REMOVE","short_name_offset":0,"short_name_size":13,"hover":"#define STAILQ_REMOVE(head, elm, type, field)    __MISMATCH_TAGS_PUSH       do {\n if (STAILQ_FIRST((head)) == (elm)) {\n  STAILQ_REMOVE_HEAD((head), field);\n }\n else {\n  struct type *curelm = STAILQ_FIRST((head));\n  while (STAILQ_NEXT(curelm, field) != (elm))\n   curelm = STAILQ_NEXT(curelm, field);\n  STAILQ_REMOVE_AFTER(head, curelm, field);\n }\n TRASHIT((elm)->field.stqe_next);    \\\n} while (0)        __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"364:9-364:22|-1|1|2","extent":"364:9-378:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":39,"usr":5609216747994344896,"detailed_name":"STAILQ_REMOVE_HEAD","short_name_offset":0,"short_name_size":18,"hover":"#define STAILQ_REMOVE_HEAD(head, field) do {\n if ((STAILQ_FIRST((head)) =\n      STAILQ_NEXT(STAILQ_FIRST((head)), field)) == NULL)\n  (head)->stqh_last = &STAILQ_FIRST((head));  \\\n} while (0)","comments":"","declarations":[],"spell":"380:9-380:27|-1|1|2","extent":"380:9-384:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":40,"usr":3540673841060014669,"detailed_name":"STAILQ_REMOVE_HEAD_UNTIL","short_name_offset":0,"short_name_size":24,"hover":"#define STAILQ_REMOVE_HEAD_UNTIL(head, elm, field) do {\n       if ((STAILQ_FIRST((head)) = STAILQ_NEXT((elm), field)) == NULL)\n               (head)->stqh_last = &STAILQ_FIRST((head));              \\\n} while (0)","comments":"","declarations":[],"spell":"386:9-386:33|-1|1|2","extent":"386:9-389:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":16497652494172063104,"detailed_name":"STAILQ_REMOVE_AFTER","short_name_offset":0,"short_name_size":19,"hover":"#define STAILQ_REMOVE_AFTER(head, elm, field) do {\n if ((STAILQ_NEXT(elm, field) =\n      STAILQ_NEXT(STAILQ_NEXT(elm, field), field)) == NULL)\n  (head)->stqh_last = &STAILQ_NEXT((elm), field);  \\\n} while (0)","comments":"","declarations":[],"spell":"391:9-391:28|-1|1|2","extent":"391:9-395:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":4143553032259931662,"detailed_name":"STAILQ_SWAP","short_name_offset":0,"short_name_size":11,"hover":"#define STAILQ_SWAP(head1, head2, type)     __MISMATCH_TAGS_PUSH       do {\n struct type *swap_first = STAILQ_FIRST(head1);\n struct type **swap_last = (head1)->stqh_last;\n STAILQ_FIRST(head1) = STAILQ_FIRST(head2);\n (head1)->stqh_last = (head2)->stqh_last;\n STAILQ_FIRST(head2) = swap_first;\n (head2)->stqh_last = swap_last;\n if (STAILQ_EMPTY(head1))\n  (head1)->stqh_last = &STAILQ_FIRST(head1);\n if (STAILQ_EMPTY(head2))\n  (head2)->stqh_last = &STAILQ_FIRST(head2);  \\\n} while (0)        __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"397:9-397:20|-1|1|2","extent":"397:9-411:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":348875882636903876,"detailed_name":"LIST_HEAD","short_name_offset":0,"short_name_size":9,"hover":"#define LIST_HEAD(name, type)      __MISMATCH_TAGS_PUSH       struct name {\n struct type *lh_first; /* first element */   \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"417:9-417:18|-1|1|2","extent":"417:9-422:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":15121376071443987799,"detailed_name":"LIST_HEAD_INITIALIZER","short_name_offset":0,"short_name_size":21,"hover":"#define LIST_HEAD_INITIALIZER(head)\n { NULL }","comments":"","declarations":[],"spell":"424:9-424:30|-1|1|2","extent":"424:9-425:10|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":16182018705606294264,"detailed_name":"LIST_ENTRY","short_name_offset":0,"short_name_size":10,"hover":"#define LIST_ENTRY(type)      __MISMATCH_TAGS_PUSH       struct {\n struct type *le_next; /* next element */\n struct type **le_prev; /* address of previous next element */ \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"427:9-427:19|-1|1|2","extent":"427:9-433:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":17360815074905755069,"detailed_name":"QMD_LIST_CHECK_HEAD","short_name_offset":0,"short_name_size":19,"hover":"#define QMD_LIST_CHECK_HEAD(head, field)","comments":"","declarations":[],"spell":"459:9-459:28|-1|1|2","extent":"459:9-459:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":3901817645847711251,"detailed_name":"QMD_LIST_CHECK_NEXT","short_name_offset":0,"short_name_size":19,"hover":"#define QMD_LIST_CHECK_NEXT(elm, field)","comments":"","declarations":[],"spell":"460:9-460:28|-1|1|2","extent":"460:9-460:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":9885462748674394793,"detailed_name":"QMD_LIST_CHECK_PREV","short_name_offset":0,"short_name_size":19,"hover":"#define QMD_LIST_CHECK_PREV(elm, field)","comments":"","declarations":[],"spell":"461:9-461:28|-1|1|2","extent":"461:9-461:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":7192575943143022946,"detailed_name":"LIST_EMPTY","short_name_offset":0,"short_name_size":10,"hover":"#define LIST_EMPTY(head) ((head)->lh_first == NULL)","comments":"","declarations":[],"spell":"464:9-464:19|-1|1|2","extent":"464:9-464:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":10374871460191156632,"detailed_name":"LIST_FIRST","short_name_offset":0,"short_name_size":10,"hover":"#define LIST_FIRST(head) ((head)->lh_first)","comments":"","declarations":[],"spell":"466:9-466:19|-1|1|2","extent":"466:9-466:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":506322155108295795,"detailed_name":"LIST_FOREACH","short_name_offset":0,"short_name_size":12,"hover":"#define LIST_FOREACH(var, head, field)\n for ((var) = LIST_FIRST((head));\n     (var);\n     (var) = LIST_NEXT((var), field))","comments":"","declarations":[],"spell":"468:9-468:21|-1|1|2","extent":"468:9-471:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":11995846689496911955,"detailed_name":"LIST_FOREACH_SAFE","short_name_offset":0,"short_name_size":17,"hover":"#define LIST_FOREACH_SAFE(var, head, field, tvar)\n for ((var) = LIST_FIRST((head));\n     (var) && ((tvar) = LIST_NEXT((var), field), 1);\n     (var) = (tvar))","comments":"","declarations":[],"spell":"473:9-473:26|-1|1|2","extent":"473:9-476:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":2544256878343788756,"detailed_name":"LIST_INIT","short_name_offset":0,"short_name_size":9,"hover":"#define LIST_INIT(head) do {\n LIST_FIRST((head)) = NULL;     \\\n} while (0)","comments":"","declarations":[],"spell":"478:9-478:18|-1|1|2","extent":"478:9-480:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":3978905953423003366,"detailed_name":"LIST_INSERT_AFTER","short_name_offset":0,"short_name_size":17,"hover":"#define LIST_INSERT_AFTER(listelm, elm, field) do {\n QMD_LIST_CHECK_NEXT(listelm, field);\n if ((LIST_NEXT((elm), field) = LIST_NEXT((listelm), field)) != NULL)\n  LIST_NEXT((listelm), field)->field.le_prev =\n      &LIST_NEXT((elm), field);\n LIST_NEXT((listelm), field) = (elm);\n (elm)->field.le_prev = &LIST_NEXT((listelm), field);  \\\n} while (0)","comments":"","declarations":[],"spell":"482:9-482:26|-1|1|2","extent":"482:9-489:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":1060659668317283558,"detailed_name":"LIST_INSERT_BEFORE","short_name_offset":0,"short_name_size":18,"hover":"#define LIST_INSERT_BEFORE(listelm, elm, field) do {\n QMD_LIST_CHECK_PREV(listelm, field);\n (elm)->field.le_prev = (listelm)->field.le_prev;\n LIST_NEXT((elm), field) = (listelm);\n *(listelm)->field.le_prev = (elm);\n (listelm)->field.le_prev = &LIST_NEXT((elm), field);  \\\n} while (0)","comments":"","declarations":[],"spell":"491:9-491:27|-1|1|2","extent":"491:9-497:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":11412003477454625184,"detailed_name":"LIST_INSERT_HEAD","short_name_offset":0,"short_name_size":16,"hover":"#define LIST_INSERT_HEAD(head, elm, field) do {\n QMD_LIST_CHECK_HEAD((head), field);\n if ((LIST_NEXT((elm), field) = LIST_FIRST((head))) != NULL)\n  LIST_FIRST((head))->field.le_prev = &LIST_NEXT((elm), field);\n LIST_FIRST((head)) = (elm);\n (elm)->field.le_prev = &LIST_FIRST((head));   \\\n} while (0)","comments":"","declarations":[],"spell":"499:9-499:25|-1|1|2","extent":"499:9-505:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":561439104627904929,"detailed_name":"LIST_NEXT","short_name_offset":0,"short_name_size":9,"hover":"#define LIST_NEXT(elm, field) ((elm)->field.le_next)","comments":"","declarations":[],"spell":"507:9-507:18|-1|1|2","extent":"507:9-507:53|-1|1|0","uses":[],"kind":255,"storage":0},{"id":58,"usr":4726485068851389666,"detailed_name":"LIST_REMOVE","short_name_offset":0,"short_name_size":11,"hover":"#define LIST_REMOVE(elm, field) do {\n QMD_LIST_CHECK_NEXT(elm, field);\n QMD_LIST_CHECK_PREV(elm, field);\n if (LIST_NEXT((elm), field) != NULL)\n  LIST_NEXT((elm), field)->field.le_prev =\n      (elm)->field.le_prev;\n *(elm)->field.le_prev = LIST_NEXT((elm), field);\n TRASHIT((elm)->field.le_next);\n TRASHIT((elm)->field.le_prev);     \\\n} while (0)","comments":"","declarations":[],"spell":"509:9-509:20|-1|1|2","extent":"509:9-518:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":59,"usr":15851835553506127134,"detailed_name":"LIST_SWAP","short_name_offset":0,"short_name_size":9,"hover":"#define LIST_SWAP(head1, head2, type, field)    __MISMATCH_TAGS_PUSH       do {\n struct type *swap_tmp = LIST_FIRST((head1));\n LIST_FIRST((head1)) = LIST_FIRST((head2));\n LIST_FIRST((head2)) = swap_tmp;\n if ((swap_tmp = LIST_FIRST((head1))) != NULL)\n  swap_tmp->field.le_prev = &LIST_FIRST((head1));\n if ((swap_tmp = LIST_FIRST((head2))) != NULL)\n  swap_tmp->field.le_prev = &LIST_FIRST((head2));  \\\n} while (0)        __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"520:9-520:18|-1|1|2","extent":"520:9-531:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":60,"usr":12080443061080894998,"detailed_name":"TAILQ_HEAD","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_HEAD(name, type)      __MISMATCH_TAGS_PUSH       struct name {\n struct type *tqh_first; /* first element */\n struct type **tqh_last; /* addr of last next element */\n TRACEBUF       \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"536:9-536:19|-1|1|2","extent":"536:9-543:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":61,"usr":13159327996280535517,"detailed_name":"TAILQ_HEAD_INITIALIZER","short_name_offset":0,"short_name_size":22,"hover":"#define TAILQ_HEAD_INITIALIZER(head)\n { NULL, &(head).tqh_first }","comments":"","declarations":[],"spell":"545:9-545:31|-1|1|2","extent":"545:9-546:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":62,"usr":16752382683096443281,"detailed_name":"TAILQ_ENTRY","short_name_offset":0,"short_name_size":11,"hover":"#define TAILQ_ENTRY(type)      __MISMATCH_TAGS_PUSH       struct {\n struct type *tqe_next; /* next element */\n struct type **tqe_prev; /* address of previous next element */\n TRACEBUF       \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"548:9-548:20|-1|1|2","extent":"548:9-555:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":63,"usr":14398158473200622289,"detailed_name":"TAILQ_CONCAT","short_name_offset":0,"short_name_size":12,"hover":"#define TAILQ_CONCAT(head1, head2, field) do {\n if (!TAILQ_EMPTY(head2)) {\n  *(head1)->tqh_last = (head2)->tqh_first;\n  (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last;\n  (head1)->tqh_last = (head2)->tqh_last;\n  TAILQ_INIT((head2));\n  QMD_TRACE_HEAD(head1);\n  QMD_TRACE_HEAD(head2);\n }        \\\n} while (0)","comments":"","declarations":[],"spell":"560:9-560:21|-1|1|2","extent":"560:9-569:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":64,"usr":6267209387263966295,"detailed_name":"TAILQ_EMPTY","short_name_offset":0,"short_name_size":11,"hover":"#define TAILQ_EMPTY(head) ((head)->tqh_first == NULL)","comments":"","declarations":[],"spell":"571:9-571:20|-1|1|2","extent":"571:9-571:54|-1|1|0","uses":[],"kind":255,"storage":0},{"id":65,"usr":1062665363434667798,"detailed_name":"TAILQ_FIRST","short_name_offset":0,"short_name_size":11,"hover":"#define TAILQ_FIRST(head) ((head)->tqh_first)","comments":"","declarations":[],"spell":"573:9-573:20|-1|1|2","extent":"573:9-573:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":66,"usr":14790828795971539760,"detailed_name":"TAILQ_FOREACH","short_name_offset":0,"short_name_size":13,"hover":"#define TAILQ_FOREACH(var, head, field)\n for ((var) = TAILQ_FIRST((head));\n     (var);\n     (var) = TAILQ_NEXT((var), field))","comments":"","declarations":[],"spell":"575:9-575:22|-1|1|2","extent":"575:9-578:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":67,"usr":14722193676575123601,"detailed_name":"TAILQ_FOREACH_SAFE","short_name_offset":0,"short_name_size":18,"hover":"#define TAILQ_FOREACH_SAFE(var, head, field, tvar)\n for ((var) = TAILQ_FIRST((head));\n     (var) && ((tvar) = TAILQ_NEXT((var), field), 1);\n     (var) = (tvar))","comments":"","declarations":[],"spell":"580:9-580:27|-1|1|2","extent":"580:9-583:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":68,"usr":5308624800498704154,"detailed_name":"TAILQ_FOREACH_REVERSE","short_name_offset":0,"short_name_size":21,"hover":"#define TAILQ_FOREACH_REVERSE(var, head, headname, field)\n for ((var) = TAILQ_LAST((head), headname);\n     (var);\n     (var) = TAILQ_PREV((var), headname, field))","comments":"","declarations":[],"spell":"585:9-585:30|-1|1|2","extent":"585:9-588:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":69,"usr":8595909920178460804,"detailed_name":"TAILQ_FOREACH_REVERSE_SAFE","short_name_offset":0,"short_name_size":26,"hover":"#define TAILQ_FOREACH_REVERSE_SAFE(var, head, headname, field, tvar)\n for ((var) = TAILQ_LAST((head), headname);\n     (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1);\n     (var) = (tvar))","comments":"","declarations":[],"spell":"590:9-590:35|-1|1|2","extent":"590:9-593:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":70,"usr":9640382066433468052,"detailed_name":"TAILQ_INIT","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_INIT(head) do {\n TAILQ_FIRST((head)) = NULL;\n (head)->tqh_last = &TAILQ_FIRST((head));\n QMD_TRACE_HEAD(head);      \\\n} while (0)","comments":"","declarations":[],"spell":"595:9-595:19|-1|1|2","extent":"595:9-599:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":71,"usr":17174924520688842822,"detailed_name":"TAILQ_INSERT_AFTER","short_name_offset":0,"short_name_size":18,"hover":"#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {\n if ((TAILQ_NEXT((elm), field) = TAILQ_NEXT((listelm), field)) != NULL)\n  TAILQ_NEXT((elm), field)->field.tqe_prev =\n      &TAILQ_NEXT((elm), field);\n else {\n  (head)->tqh_last = &TAILQ_NEXT((elm), field);\n  QMD_TRACE_HEAD(head);\n }\n TAILQ_NEXT((listelm), field) = (elm);\n (elm)->field.tqe_prev = &TAILQ_NEXT((listelm), field);\n QMD_TRACE_ELEM(&(elm)->field);\n QMD_TRACE_ELEM(&listelm->field);    \\\n} while (0)","comments":"","declarations":[],"spell":"601:9-601:27|-1|1|2","extent":"601:9-613:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":72,"usr":13736462906572909407,"detailed_name":"TAILQ_INSERT_BEFORE","short_name_offset":0,"short_name_size":19,"hover":"#define TAILQ_INSERT_BEFORE(listelm, elm, field) do {\n (elm)->field.tqe_prev = (listelm)->field.tqe_prev;\n TAILQ_NEXT((elm), field) = (listelm);\n *(listelm)->field.tqe_prev = (elm);\n (listelm)->field.tqe_prev = &TAILQ_NEXT((elm), field);\n QMD_TRACE_ELEM(&(elm)->field);\n QMD_TRACE_ELEM(&listelm->field);    \\\n} while (0)","comments":"","declarations":[],"spell":"615:9-615:28|-1|1|2","extent":"615:9-622:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":73,"usr":14296539240301736579,"detailed_name":"TAILQ_INSERT_HEAD","short_name_offset":0,"short_name_size":17,"hover":"#define TAILQ_INSERT_HEAD(head, elm, field) do {\n if ((TAILQ_NEXT((elm), field) = TAILQ_FIRST((head))) != NULL)\n  TAILQ_FIRST((head))->field.tqe_prev =\n      &TAILQ_NEXT((elm), field);\n else\n  (head)->tqh_last = &TAILQ_NEXT((elm), field);\n TAILQ_FIRST((head)) = (elm);\n (elm)->field.tqe_prev = &TAILQ_FIRST((head));\n QMD_TRACE_HEAD(head);\n QMD_TRACE_ELEM(&(elm)->field);     \\\n} while (0)","comments":"","declarations":[],"spell":"624:9-624:26|-1|1|2","extent":"624:9-634:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":74,"usr":9858574330497058084,"detailed_name":"TAILQ_INSERT_TAIL","short_name_offset":0,"short_name_size":17,"hover":"#define TAILQ_INSERT_TAIL(head, elm, field) do {\n TAILQ_NEXT((elm), field) = NULL;\n (elm)->field.tqe_prev = (head)->tqh_last;\n *(head)->tqh_last = (elm);\n (head)->tqh_last = &TAILQ_NEXT((elm), field);\n QMD_TRACE_HEAD(head);\n QMD_TRACE_ELEM(&(elm)->field);     \\\n} while (0)","comments":"","declarations":[],"spell":"636:9-636:26|-1|1|2","extent":"636:9-643:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":75,"usr":10782900585177235652,"detailed_name":"TAILQ_LAST","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_LAST(head, headname)     __MISMATCH_TAGS_PUSH\n (*(((struct headname *)((head)->tqh_last))->tqh_last))  __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"645:9-645:19|-1|1|2","extent":"645:9-648:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":76,"usr":5994624414639130235,"detailed_name":"TAILQ_NEXT","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_NEXT(elm, field) ((elm)->field.tqe_next)","comments":"","declarations":[],"spell":"650:9-650:19|-1|1|2","extent":"650:9-650:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":77,"usr":2964194641703280463,"detailed_name":"TAILQ_PREV","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_PREV(elm, headname, field)    __MISMATCH_TAGS_PUSH\n (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last)) __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"652:9-652:19|-1|1|2","extent":"652:9-655:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":78,"usr":1923627658328555311,"detailed_name":"TAILQ_REMOVE","short_name_offset":0,"short_name_size":12,"hover":"#define TAILQ_REMOVE(head, elm, field) do {\n if ((TAILQ_NEXT((elm), field)) != NULL)\n  TAILQ_NEXT((elm), field)->field.tqe_prev =\n      (elm)->field.tqe_prev;\n else {\n  (head)->tqh_last = (elm)->field.tqe_prev;\n  QMD_TRACE_HEAD(head);\n }\n *(elm)->field.tqe_prev = TAILQ_NEXT((elm), field);\n TRASHIT((elm)->field.tqe_next);\n TRASHIT((elm)->field.tqe_prev);\n QMD_TRACE_ELEM(&(elm)->field);     \\\n} while (0)","comments":"","declarations":[],"spell":"657:9-657:21|-1|1|2","extent":"657:9-669:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":79,"usr":12113742477330071667,"detailed_name":"TAILQ_SWAP","short_name_offset":0,"short_name_size":10,"hover":"#define TAILQ_SWAP(head1, head2, type, field)                           __MISMATCH_TAGS_PUSH                                                    do {\n struct type *swap_first = (head1)->tqh_first;\n struct type **swap_last = (head1)->tqh_last;\n (head1)->tqh_first = (head2)->tqh_first;\n (head1)->tqh_last = (head2)->tqh_last;\n (head2)->tqh_first = swap_first;\n (head2)->tqh_last = swap_last;\n if ((swap_first = (head1)->tqh_first) != NULL)\n  swap_first->field.tqe_prev = &(head1)->tqh_first;\n else\n  (head1)->tqh_last = &(head1)->tqh_first;\n if ((swap_first = (head2)->tqh_first) != NULL)\n  swap_first->field.tqe_prev = &(head2)->tqh_first;\n else\n  (head2)->tqh_last = &(head2)->tqh_first;                \\\n} while (0)                                                             __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"674:9-674:19|-1|1|2","extent":"674:9-692:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":80,"usr":675595841725239867,"detailed_name":"CIRCLEQ_HEAD","short_name_offset":0,"short_name_size":12,"hover":"#define CIRCLEQ_HEAD(name, type)     __MISMATCH_TAGS_PUSH       struct name {\n struct type *cqh_first;  /* first element */\n struct type *cqh_last;  /* last element */  \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"697:9-697:21|-1|1|2","extent":"697:9-703:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":81,"usr":14281663637093903496,"detailed_name":"CIRCLEQ_ENTRY","short_name_offset":0,"short_name_size":13,"hover":"#define CIRCLEQ_ENTRY(type)      __MISMATCH_TAGS_PUSH       struct {\n struct type *cqe_next;  /* next element */\n struct type *cqe_prev;  /* previous element */  \\\n}         __MISMATCH_TAGS_POP","comments":"","declarations":[],"spell":"705:9-705:22|-1|1|2","extent":"705:9-711:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":82,"usr":3692528313191622227,"detailed_name":"CIRCLEQ_EMPTY","short_name_offset":0,"short_name_size":13,"hover":"#define CIRCLEQ_EMPTY(head) ((head)->cqh_first == (void *)(head))","comments":"","declarations":[],"spell":"716:9-716:22|-1|1|2","extent":"716:9-716:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":83,"usr":7143296080037096487,"detailed_name":"CIRCLEQ_FIRST","short_name_offset":0,"short_name_size":13,"hover":"#define CIRCLEQ_FIRST(head) ((head)->cqh_first)","comments":"","declarations":[],"spell":"718:9-718:22|-1|1|2","extent":"718:9-718:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":84,"usr":5164397552899412562,"detailed_name":"CIRCLEQ_FOREACH","short_name_offset":0,"short_name_size":15,"hover":"#define CIRCLEQ_FOREACH(var, head, field)\n for((var) = (head)->cqh_first;\n     (var) != (void *)(head);\n     (var) = (var)->field.cqe_next)","comments":"","declarations":[],"spell":"720:9-720:24|-1|1|2","extent":"720:9-723:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":85,"usr":11160031227782337276,"detailed_name":"CIRCLEQ_INIT","short_name_offset":0,"short_name_size":12,"hover":"#define CIRCLEQ_INIT(head) do {\n (head)->cqh_first = (void *)(head);\n (head)->cqh_last = (void *)(head);    \\\n} while (0)","comments":"","declarations":[],"spell":"725:9-725:21|-1|1|2","extent":"725:9-728:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":86,"usr":9445025011587010524,"detailed_name":"CIRCLEQ_INSERT_AFTER","short_name_offset":0,"short_name_size":20,"hover":"#define CIRCLEQ_INSERT_AFTER(head, listelm, elm, field) do {\n (elm)->field.cqe_next = (listelm)->field.cqe_next;\n (elm)->field.cqe_prev = (listelm);\n if ((listelm)->field.cqe_next == (void *)(head))\n  (head)->cqh_last = (elm);\n else\n  (listelm)->field.cqe_next->field.cqe_prev = (elm);\n (listelm)->field.cqe_next = (elm);    \\\n} while (0)","comments":"","declarations":[],"spell":"730:9-730:29|-1|1|2","extent":"730:9-738:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":87,"usr":3637462772776101205,"detailed_name":"CIRCLEQ_INSERT_BEFORE","short_name_offset":0,"short_name_size":21,"hover":"#define CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field) do {\n (elm)->field.cqe_next = (listelm);\n (elm)->field.cqe_prev = (listelm)->field.cqe_prev;\n if ((listelm)->field.cqe_prev == (void *)(head))\n  (head)->cqh_first = (elm);\n else\n  (listelm)->field.cqe_prev->field.cqe_next = (elm);\n (listelm)->field.cqe_prev = (elm);    \\\n} while (0)","comments":"","declarations":[],"spell":"740:9-740:30|-1|1|2","extent":"740:9-748:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":88,"usr":2445255084490560365,"detailed_name":"CIRCLEQ_INSERT_HEAD","short_name_offset":0,"short_name_size":19,"hover":"#define CIRCLEQ_INSERT_HEAD(head, elm, field) do {\n (elm)->field.cqe_next = (head)->cqh_first;\n (elm)->field.cqe_prev = (void *)(head);\n if ((head)->cqh_last == (void *)(head))\n  (head)->cqh_last = (elm);\n else\n  (head)->cqh_first->field.cqe_prev = (elm);\n (head)->cqh_first = (elm);     \\\n} while (0)","comments":"","declarations":[],"spell":"750:9-750:28|-1|1|2","extent":"750:9-758:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":89,"usr":11228218386477995288,"detailed_name":"CIRCLEQ_INSERT_TAIL","short_name_offset":0,"short_name_size":19,"hover":"#define CIRCLEQ_INSERT_TAIL(head, elm, field) do {\n (elm)->field.cqe_next = (void *)(head);\n (elm)->field.cqe_prev = (head)->cqh_last;\n if ((head)->cqh_first == (void *)(head))\n  (head)->cqh_first = (elm);\n else\n  (head)->cqh_last->field.cqe_next = (elm);\n (head)->cqh_last = (elm);     \\\n} while (0)","comments":"","declarations":[],"spell":"760:9-760:28|-1|1|2","extent":"760:9-768:12|-1|1|0","uses":[],"kind":255,"storage":0},{"id":90,"usr":1318954852075707607,"detailed_name":"CIRCLEQ_LAST","short_name_offset":0,"short_name_size":12,"hover":"#define CIRCLEQ_LAST(head) ((head)->cqh_last)","comments":"","declarations":[],"spell":"770:9-770:21|-1|1|2","extent":"770:9-770:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":91,"usr":9100779307138603675,"detailed_name":"CIRCLEQ_NEXT","short_name_offset":0,"short_name_size":12,"hover":"#define CIRCLEQ_NEXT(elm,field) ((elm)->field.cqe_next)","comments":"","declarations":[],"spell":"772:9-772:21|-1|1|2","extent":"772:9-772:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":92,"usr":13226814720678526917,"detailed_name":"CIRCLEQ_PREV","short_name_offset":0,"short_name_size":12,"hover":"#define CIRCLEQ_PREV(elm,field) ((elm)->field.cqe_prev)","comments":"","declarations":[],"spell":"774:9-774:21|-1|1|2","extent":"774:9-774:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":93,"usr":9611158993098567910,"detailed_name":"CIRCLEQ_REMOVE","short_name_offset":0,"short_name_size":14,"hover":"#define CIRCLEQ_REMOVE(head, elm, field) do {\n if ((elm)->field.cqe_next == (void *)(head))\n  (head)->cqh_last = (elm)->field.cqe_prev;\n else\n  (elm)->field.cqe_next->field.cqe_prev =\n      (elm)->field.cqe_prev;\n if ((elm)->field.cqe_prev == (void *)(head))\n  (head)->cqh_first = (elm)->field.cqe_next;\n else\n  (elm)->field.cqe_prev->field.cqe_next =\n      (elm)->field.cqe_next;    \\\n} while (0)","comments":"","declarations":[],"spell":"776:9-776:23|-1|1|2","extent":"776:9-787:12|-1|1|0","uses":[],"kind":255,"storage":0}]}